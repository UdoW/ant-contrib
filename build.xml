<project name="ant-contrib" default="jar" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <property file="build.properties"/>

    <property name="root.dir" location="."/>
    <property name="src.dir" location="src"/>
    <property name="src.java.dir" location="${src.dir}/java"/>
    <property name="test.dir" location="test"/>
    <property name="test.src.dir" location="${test.dir}/src"/>
    <property name="test.resources.dir" location="${test.dir}/resources"/>
    <property name="docs.dir" location="docs"/>
    <property name="target.dir" location="target"/>
    <property name="lib.dir" value="${target.dir}/lib"/>
    <property name="target.classes.dir" location="${target.dir}/classes"/>
    <property name="target.test-classes.dir" location="${target.dir}/test-classes"/>
    <property name="target.docs.dir" location="${target.dir}/docs"/>
    <property name="target.stage.dir" location="${target.dir}/stage"/>
    <property name="dist.dir" location="dist"/>
    <path id="compile.classpath" path="${lib.dir}/compile"/>

    <!-- Ivy -->
    <property name="central.repo" value="http://repo1.maven.org/maven2"/>
    <property name="ivy.version" value="2.4.0"/>
    <property name="ivy.dir" value="${user.home}/.ivy2/cache/org.apache.ivy/jars"/>
    <property name="ivy.jar.name" value="ivy-${ivy.version}.jar"/>
    <available property="has.ivy" file="${ivy.dir}/${ivy.jar.name}" type="file"/>
    <target name="get-ivy" description="o Get Ivy jar unless already cached" unless="has.ivy">
        <mkdir dir="${ivy.dir}"/>
        <get usetimestamp="true" src="https://repository.apache.org/content/repositories/releases/org/apache/ivy/ivy/${ivy.version}/${ivy.jar.name}"
             skipexisting="true"
             dest="${ivy.dir}/${ivy.jar.name}"/>
    </target>

    <target name="init" description="o Initialize Ivy" depends="get-ivy">
      <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${ivy.dir}/${ivy.jar.name}"/>
      <ivy:settings file="${basedir}/ivy.settings.xml"/>
    </target>

    <target name="get-deps" description="o Retrieve dependencies" depends="init" unless="noget">
      <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" sync="true" type="jar"/>
    </target>

    <target name="classpath" depends="get-deps">
        <ivy:cachepath pathid="compile.classpath" type="jar" conf="provided"/>
        <ivy:cachepath pathid="runtime.classpath" type="jar" conf="default"/>
        <ivy:cachepath pathid="test.classpath" type="jar" conf="test"/>
        <ivy:cachefileset setid="compile.fileset" type="jar" conf="provided"/>
        <ivy:cachefileset setid="runtime.fileset" type="jar" conf="default"/>
        <ivy:cachefileset setid="test.fileset" type="jar" conf="test"/>
    </target>

    <target name="compile" description="o Compile Java classes and copy antlib" depends="classpath">
        <mkdir dir="${target.classes.dir}"/>
        <javac srcdir="${src.java.dir}"
               destdir="${target.classes.dir}"
               debug="true"
               classpathref="compile.classpath"
               source="${jdk.source}"
               target="${jdk.target}"
               includeantruntime="false"/>

        <copy todir="${target.classes.dir}">
            <fileset dir="${src.java.dir}"
                 includes="**/*.xml"/>
        </copy>
    </target>

    <target name="compile-tests" description="o Compile test Java classes" depends="compile">
        <mkdir dir="${target.test-classes.dir}"/>
        <javac srcdir="${test.src.dir}"
               destdir="${target.test-classes.dir}"
               debug="true"
               source="${jdk.source}"
               target="${jdk.target}"
               includeantruntime="true">
            <classpath>
                <path refid="test.classpath"/>
                <pathelement location="${target.classes.dir}"/>
            </classpath>
        </javac>

        <copy todir="${target.test-classes.dir}">
            <fileset dir="${test.src.dir}"
                 includes="**/*.properties,**/*.xml"/>
            <fileset dir="${test.resources.dir}"
                 includes="**/*.java,**/*.properties,**/*.xml,**/*.txt,**/.classpath"/>
        </copy>
    </target>

    <target name="jar" description="o Build jar file" depends="compile-tests">
        <mkdir dir="${target.dir}"/>
        <tstamp>
            <format property="tstamp" pattern="dd/MM/yyyy HH:mm:ss"/>
        </tstamp>
        <jar file="${target.dir}/${jar.name}">
            <manifest>
                <attribute name="Version" value="${project.version}"/>
                <attribute name="Build-Timestamp" value="${tstamp}"/>
            </manifest>
            <fileset dir="${target.classes.dir}"/>
        </jar>
    </target>

    <target name="test" description="o Run JUnit tests" depends="jar">
        <junit fork="true" tempdir="${target.dir}" haltonerror="false" haltonfailure="false"
               errorproperty="junit.error" failureproperty="junit.failure">
            <formatter type="brief" usefile="false"/>
            <sysproperty key="basedir" value="${target.test-classes.dir}"/>
            <sysproperty key="antcontrib.jar" file="${target.dir}/${jar.name}"/>
            <batchtest>
                <fileset dir="${target.test-classes.dir}" includes="net/sf/antcontrib/**/*Test.class">
                    <exclude name="**/${skip.tests}/**" if="skip.tests"/>
                    <exclude name="**/antclipse/**" unless="eclipse.present"/>
                    <exclude name="walls/**"/>
                </fileset>
            </batchtest>
            <classpath>
                <path refid="test.classpath"/>
                <pathelement location="${target.classes.dir}"/>
                <pathelement location="${target.test-classes.dir}"/>
            </classpath>
        </junit>

        <fail message="JUnit error (${junit.error}) encountered." if="junit.error"/>
        <fail message="JUnit failure (${junit.failure}) encountered." if="junit.failure"/>
    </target>

    <target name="javadoc" description="o Build javadoc" depends="classpath">
        <javadoc sourcepath="${src.java.dir}"
             destdir="${target.docs.dir}/api"
             packagenames="net.sf.antcontrib.*"
             author="true"
             version="true"
             windowtitle="Ant Contrib"
             classpathref="compile.classpath">
        <tag name="ant.task" enabled="false" description="Task:" scope="types"/>
        <tag name="ant.datatype" enabled="false"
             description="Data type:" scope="types"/>
        <tag name="ant.attribute" enabled="false"
             description="Attribute:" scope="types"/>
        <tag name="ant.attribute.group" enabled="false"
             description="Attribute group:" scope="types"/>
        <tag name="ant.element" enabled="false"
             description="Nested element:" scope="types"/>
        </javadoc>
    </target>

    <target name="docs" description="o Add manual to javadoc for distribution" depends="javadoc">
        <mkdir dir="${target.docs.dir}"/>
        <copy todir="${target.docs.dir}">
            <fileset dir="${docs.dir}" includes="**/*"/>
        </copy>
    </target>

    <target name="dist-stage" description="o Stage distribution" depends="test,docs">
        <mkdir dir="${target.stage.dir}"/>
        <mkdir dir="${target.stage.dir}/lib"/>

        <copy file="${target.dir}/${jar.name}"
              tofile="${target.stage.dir}/${jar.name.versioned}"/>

        <copy todir="${target.stage.dir}">
            <fileset dir="${root.dir}" includes="README.txt"/>
            <fileset dir="${target.dir}" includes="docs/**/*"/>
        </copy>
        <copy todir="${target.stage.dir}/lib" flatten="true">
            <fileset refid="runtime.fileset"/>
        </copy>
    </target>

    <target name="zip" depends="dist-stage">
        <mkdir dir="${dist.dir}"/>
        <zip file="${dist.dir}/${project.name}-${project.version}-bin.zip">
            <zipfileset prefix="ant-contrib" dir="${target.stage.dir}"
                        includes="**/*"/>
        </zip>

        <zip file="${dist.dir}/${project.name}-${project.version}-src.zip">
            <zipfileset prefix="ant-contrib"
                        dir="${root.dir}"
                        includes="**/*"
                        excludes="target,target/**/*,dist,dist/**/*"/>
        </zip>
    </target>

    <target name="tar.gz" depends="dist-stage">
        <mkdir dir="${dist.dir}"/>

        <tar destfile="${dist.dir}/${project.name}-${project.version}-bin.tar.gz"
             compression="gzip">
            <tarfileset prefix="ant-contrib"
                        dir="${target.stage.dir}"
                        includes="**/*"/>
        </tar>

        <tar destfile="${dist.dir}/${project.name}-${project.version}-bin.tar.bz2"
             compression="bzip2">
            <tarfileset prefix="ant-contrib"
                        dir="${target.stage.dir}"
                        includes="**/*"/>
        </tar>

        <tar destfile="${dist.dir}/${project.name}-${project.version}-src.tar.gz"
             compression="gzip">
            <tarfileset prefix="ant-contrib"
                        dir="${root.dir}"
                        includes="**/*"
                        excludes="target,target/**/*,dist,dist/**/*"/>
        </tar>

        <tar destfile="${dist.dir}/${project.name}-${project.version}-src.tar.bz2"
             compression="bzip2">
            <tarfileset prefix="ant-contrib"
                        dir="${root.dir}"
                        includes="**/*"
                        excludes="target,target/**/*,dist,dist/**/*"/>
        </tar>
    </target>

    <target name="package" description="o Package and checksum the distribution" depends="tar.gz,zip">
        <checksum fileext=".md5">
            <fileset dir="${dist.dir}">
                <include name="*.zip"/>
                <include name="*.tar.bz2"/>
                <include name="*.tar.gz"/>
            </fileset>
        </checksum>
    </target>

    <target name="dist" depends="package"/>

    <target name="clean">
        <delete includeemptydirs="true">
            <fileset dir="${target.dir}" includes="**/*"/>
            <fileset dir="${dist.dir}" includes="**/*"/>
        </delete>
    </target>

</project>
