<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>AntClipse Task</title>
    <author email="danson@germane-software.com">Dale Anson</author>
  </properties>
  <body>
    <section name="AntFetch">
      <p>
        AntFetch is identical to the standard 'Ant' task, except that
        it allows properties from the new project to be set in the
        original project.
      </p>
      <p>
        Some background may be in order: When the <code>ant</code>
        task is used, in actuality, a new Ant project is created, and
        depending on the inheritAll property, it is populated with
        properties from the original project. Then the target in this
        new project is executed. Any properties set in the new project
        remain with that project, they do not get "passed back" to the
        original project. So, for example, if the target in the new
        project sets a property named "image.directory", there is no
        reference to that property in the original. Here's an example
        of what I mean:
      </p>
      <p>
        Suppose that the "fillImageDirectory" target sets a property
        named "image.directory" and I call the following:
      </p>
      <source><![CDATA[<ant dir="${image.project} target="fillImageDirectory"/>
<echo>${image.directory}</echo>]]></source>
      <p>
        The output of the echo task will be ${image.directory}, not
        whatever was set in the "fillImageDirectory" target.
      </p>
      <p>
        The AntFetch task allows that image.directory property to be
        set in the original project. The attributes for AntFetch are
        identical to the 'Ant' task, with one additional, optional
        attibute. This attribute is named "return" and can be either a
        single property name or a comma separated list of property
        names.
      </p>
      <p>
        Assuming that "fillImageDirectory" actually sets a property
        named "image.directory", the following example will print out
        the directory name:
      </p>
      <source><![CDATA[<antfetch dir="${image.project} target="fillImageDirectory" return="image.directory"/>
<echo>${image.directory}</echo>]]></source>
      <p>
        And this one will also print out the thumbnail directory:
      </p>
      <source><![CDATA[<antfetch dir="${image.project} target="fillImageDirectory" return="image.directory, thumbnail.directory"/>
<echo>${image.directory}</echo>
<echo>${thumbnail.directory}</echo>]]></source>
      <p>
        The attributes for AntFetch are identical to the 'ant' task,
        with one additional, optional attibute. This attribute is
        named "return" and can be either a single property name or a
        comma separated list of property names.
      </p>
      <table summary="AntFetch Attributes" border="1" cellpadding="2" cellspacing="0">
        <caption>AntFetch Attributes</caption>
        <thead>
          <tr>
            <th>Attribute</th>
            <th>Description</th>
            <th>Default</th>
            <th>Required</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>return</td>
            <td>
              A comma separated list of property names. Whitespace is
              allowed, so either "a,b" or "a, b" are acceptable.
            </td>
            <td>None</td>
            <td>No</td>
          </tr>
        </tbody>
      </table>
      <p>
        For other attribute and nested element information and more
        examples, see the documentation for the
        <a href="https://ant.apache.org/manual/Tasks/ant.html">ant</a>
        task in the Ant documentation.
      </p>
    </section>
  </body>
</document>
