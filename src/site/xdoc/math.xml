<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Math Task</title>
    <author email="mattinger@yahoo.com">Matthew Inger</author>
  </properties>
  <body>
    <section name="Math">
      <p>
        The <code>math</code> task provides support for all the basic
        mathematical operations provided by the
        <code>java.lang.Math</code> and
        <code>java.lang.StrictMath</code> classes. It supports
        <code>int</code>, <code>long</code>, <code>float</code> and
        <code>double</code> data types. Nesting of operations is
        supported to allow computation of formulas like <code>(6 +
        (7.25 * 3.9))/(2 * 3 * 3)</code> or calculating the area of a
        circle given a radius (I'm sure this comes up often in builds
        controlled by Ant!).
      </p>
      <p>
        In addition to the operations provided by the
        <code>java.lang.Math</code> and
        <code>java.lang.StrictMath</code> classes, the
        <code>math</code> task provides several additional operations:
        "add", "subtract", "multiply", "divide", and "mod", which
        duplicate the basic Java mathematical operations
        "<code>+</code>", "<code>-</code>", "<code>*</code>",
        "<code>/</code>", and "<code>%</code>", respectively. In fact,
        either notation can be used, that is, the operation can be set
        to "add" or "<code>+</code>", depending only on which you feel
        is more convenient.
      </p>
      <table summary="Math Task Attributes" border="1" cellpadding="2" cellspacing="0">
        <caption>Math Task Attributes</caption>
        <thead>
          <tr>
            <th>Attribute</th>
            <th>Description</th>
            <th>Default</th>
            <th>Required</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>result</td>
            <td>The name of the property to hold the result of the operation.</td>
            <td>None</td>
            <td>Yes</td>
          </tr>
          <tr>
            <td>datatype</td>
            <td>
              Sets the datatype of the calculation. Allowed values are
              "int", "long", "float", or "double". Optional, if used,
              will be applied to all numbers in this math operation.
            </td>
            <td>double</td>
            <td>No</td>
          </tr>
          <tr>
            <td>strict</td>
            <td>
              If true, use the methods in the
              <code>java.lang.StrictMath</code> class.
            </td>
            <td>false</td>
            <td>No</td>
          </tr>
          <tr>
            <td>operation</td>
            <td>
              If used, any nested <code>op</code>s will be
              ignored. This is for convenience with simple
              calculations.
            </td>
            <td>None</td>
            <td>Yes, not if <code>op</code> element is used</td>
          </tr>
          <tr>
            <td>operand1</td>
            <td>A number to use with the operation specified in the "operation" attribute.</td>
            <td>None</td>
            <td>Depends on the specific operation.</td>
          </tr>
          <tr>
            <td>operand2</td>
            <td>A number to use with the operation specified in the "operation" attribute.</td>
            <td>None</td>
            <td>Depends on the specific operation.</td>
          </tr>
        </tbody>
      </table>
      <p>
        The "result" property is reusable.
      </p>
      <p>
        The <code>math</code> task supports nested <code>op</code>
        elements. An <code>op</code> element represents single
        mathematical operation, such as "min" or "add". As an
        alternative, if using Ant 1.5+, you can specify the operation
        in the tag name itself. However, you must use the text name
        ("<code>+</code>", "<code>-</code>", "<code>/</code>",
        "<code>*</code>", "<code>%</code>" are not permitted as tag
        names).
      </p>
      <source><![CDATA[<radians>
  <num value="90"/>
</radians>]]></source>
      <p>instead of</p>
      <source><![CDATA[<op op="radians">
  <num value="90"/>
</op>]]></source>
      <table summary="Op Attributes" border="1" cellpadding="2" cellspacing="0">
        <caption>Op Attributes</caption>
        <thead>
          <tr>
            <th>Attribute</th>
            <th>Description</th>
            <th>Default</th>
            <th>Required</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>op</td>
            <td>
              Set the name of this operation. Allowed values are one
              of the method names from <code>java.lang.Math</code> or
              <code>java.lang.StrictMath</code>, or one of "add",
              "subtract", "multiply", "divide", or "mod" (or
              "<code>+</code>", "<code>-</code>", "<code>*</code>",
              "<code>/</code>", or "<code>%</code>",
              respectively). "toRadians" and "toDegrees" can be
              represented by "radians" and "degrees", respectively, as
              a shorthand.
            </td>
            <td>None</td>
            <td>Yes, if not specified in the tag name.</td>
          </tr>
          <tr>
            <td>operation</td>
            <td>
             <p> Specifies the operation to execute. Possible operations are:</p>
             <p><code>+ , - , * , / , %</code></p>
             <p><code>abs, acos, add, asin, atan, atan2, ceil, convert, cos, degrees, divide, evaluate, execute, exp, floor, ieeeremainder,</code></p>
             <p><code>max, min, mod, multiply, pow, radians, random, rint, round, sin, sqrt, subtract, tan, todegrees, toradians</code></p>
              <p>For more informations please refer to:</p>
              <p><a href="https://top-logic.github.io/ant-contrib/apidocs/index.html">https://top-logic.github.io/ant-contrib/apidocs/index.html</a></p>
              <p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html">https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html</a></p>
            </td>
            <td>+</td>
            <td>No</td>
          </tr>
          <tr>
            <td>datatype</td>
            <td>
              Sets the datatype of this calculation. Allowed values
              are "int", "long", "float", or "double". Optional,
              default is "double". If the parent <code>math</code>
              task has a datatype set, this value will be ignored and
              the datatype specified in the task will be used.
            </td>
            <td>"int"</td>
            <td>No</td>
          </tr>
          <tr>
            <td>arg1, arg2, arg3, arg4, arg5</td>
            <td>
              The number arguments for this operation. This is a shorthand to
              avoid having to use nested elements when performing a
              simple calculation.
            </td>
            <td>None</td>
            <td>
              No. However, these attributes are mutually exclusive
              with the <code>op</code> and <code>num</code>
              subelements.
            </td>
          </tr>
        </tbody>
      </table>
      <p>
        The <code>op</code> element supports nested <code>op</code>
        elements and nested <code>num</code> elements. A
        <code>num</code> represents a number. When an <code>op</code>
        is nested in another <code>op</code>, the result of the
        <code>op</code> is treated as a <code>num</code>. The nested
        elements can be any combination of <code>op</code> (short form
        included as mentioned above) or <code>num</code> as
        appropriate for the formula being calculated. Most of the
        operations provided by <code>java.lang.Math</code> and
        <code>java.lang.StrictMath</code> operate on one or two
        numbers. The "<code>+</code>", "<code>-</code>",
        "<code>*</code>", "<code>/</code>", and "<code>%</code>"
        operations can task any number of nested numbers.
      </p>
      <table summary="Num Attributes" border="1" cellpadding="2" cellspacing="0">
        <caption>Num Attributes</caption>
        <thead>
          <tr>
            <th>Attribute</th>
            <th>Description</th>
            <th>Default</th>
            <th>Required</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>value</td>
            <td>
              Set the value for this number. Must be able to parse to
              the datatype set by the parent element or the default
              datatype set by the task. Two special numbers, pi and e,
              can be represented by "PI" and "E" respectively. ("PI"
              is the ratio of the diameter of a circle to its radius,
              "E" is Euler's e, the base for natural logarithms.)
            </td>
            <td>None</td>
            <td>Yes</td>
          </tr>
          <tr>
            <td>datatype</td>
            <td>
              Sets the datatype of this number. Allowed values are
              "int", "long", "float", or "double". Optional, default
              is "double". If the parent <code>math</code> task has a
              datatype set, this value will be ignored and the
              datatype specified in the task will be used.
            </td>
            <td>double</td>
            <td>No</td>
          </tr>
        </tbody>
      </table>
      <p>
        Some examples:
      </p>
      <source><![CDATA[
<var name="op1" value="12"/>
<var name="op2" value="6"/>
<var name="op" value="+"/>

<!-- demo plus -->
<math result="result" operand1="${op1}" operation="${op}" operand2="${op2}" datatype="int"/>
<echo>${op1} ${op} ${op2} = ${result}</echo>
<assert name="result" value="18"/>

<!-- demo reusing result -->
<math result="result" operand1="${result}" operation="${op}" operand2="${op2}" datatype="int"/>
<echo>${op1} ${op} ${op2} = ${result}</echo>
<assert name="result" value="24"/>

<!-- demo minus -->
<var name="op" value="-"/>
<math result="result" operand1="${op1}" operation="${op}" operand2="${op2}" datatype="int"/>
<echo>${op1} ${op} ${op2} = ${result}</echo>
<assert name="result" value="6"/>

<!-- demo multiply -->
<var name="op" value="*"/>
<math result="result" operand1="${op1}" operation="${op}" operand2="${op2}" datatype="int"/>
<echo>${op1} ${op} ${op2} = ${result}</echo>
<assert name="result" value="72"/>

<!-- demo divide -->
<var name="op" value="/"/>
<math result="result" operand1="${op1}" operation="${op}" operand2="${op2}" datatype="int"/>
<echo>${op1} ${op} ${op2} = ${result}</echo>
<assert name="result" value="2"/>

<!-- demo modulo -->
<var name="op" value="%"/>
<math result="result" operand1="${op1}" operation="${op}" operand2="${op2}" datatype="int"/>
<echo>${op1} ${op} ${op2} = ${result}</echo>
<assert name="result" value="0"/>

<!-- demo calculating the area of a circle -->
<!-- first, calculate the radius -->
<math result="radius">  <!-- defaults to double datatype -->
    <op operation="*" datatype="int">
        <num value="1"/>
        <num value="2"/>
        <num value="3"/>
        <num value="4"/>
        <num value="5"/>
    </op>
</math>
<echo> 1 * 2 * 3 * 4 * 5 = ${radius}</echo>

<!-- now calculate the area -->
<math result="area" datatype="float">
    <op operation="*" datatype="double">
        <num value="PI"/>
        <op operation="pow">
            <num value="${radius}"/>
            <num value="2"/>
        </op>
    </op>
</math>
<echo>area = PI * radius ^ 2 = ${area}</echo>

<!-- Interconnect operations. -->
<math result="result" datatype="float">
    <op operation="+">
        <op operation="/">
            <num value="1536"/>
            <num value="1024"/>
        </op>
        <op operation="*" datatype="int">
            <op operation="*">
            	<num value="1.5" datatype="float"/>
            	<num value="1024"/>
        	</op>
            <op operation="-">
            	<num value="1024"/>
           		<num value="512"/>
        	</op>
        </op>
    </op>
</math>
<echo>1536 / 1024 + 1.5 * 1024 * (1024 - 512) = ${result}</echo>

<!-- demo calculating a random number between 0 and 100 -->
<math result="result">
    <op operation="rint">
        <op operation="*">
            <num value="100"/>
            <op operation="random"/>
        </op>
    </op>
</math>
<echo>a random number between 0 and 100: ${result}</echo>

<!-- demo another multiplication -->
<math result="result" operation="multiply" operand1="17" operand2="13"/>
<echo>${result}</echo>

<!-- demo shorthand notation for calculating sin of an angle, which is degrees -->
<math result="sin">
     <sin>
         <radians arg1="${angle_in_degrees}" />
     </sin>
</math>
<echo>${sin}</echo>
]]></source>
    </section>
  </body>
</document>
