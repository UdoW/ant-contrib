<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>VerifyDesign Legacy System Tutorial</title>
    <author email="dean@xsoftware.biz">Dean Hiller</author>
  </properties>
  <body>
    <section name="VerifyDesign Legacy System Tutorial">
    <p>
      If you have a legacy system, it can be overwhelming as a typical
      system is a mess when it comes to package dependencies. This
      tutorial shows a way to ease into the <code>verifydesign</code>
      task instead of fixing everything all at once.
    </p>
    <p>
      First, in your <code>build.xml</code> file, use this line to
      verify your jar (or you can modify it to verify multiple jars)
    </p>
    <source><![CDATA[<verifydesign jar="yourjarname.jar" design="design.xml"/>]]></source>
    <p>
      Now is the hardest part, go ahead and define every package and
      set the needDepends attribute to false for all of them so your
      <code>design.xml</code> should look like so
    </p>
    <source>
      <![CDATA[
  <design>
      <package name="first" package="your.first.package" needDepends="false"/>
      <package name="second" package="your.second.package" needDepends="false"/>
      <package name="third" package="your.third.package" needDepends="false"/>
      <package name="fourth" package="your.fourth.package" needDepends="false"/>
      <package name="fifth" package="your.fifth.package" needDepends="false"/>
  </design>
      ]]>
    </source>
    <p>
      Please give them better names then first, second, third, etc.
      You may have 100 packages on some projects and this may take a
      while to get started, but keep in mind once you are done with
      this, you are done with the majority of the work and the build
      will pass once you are done with this too!
    </p>
    <p>
      Now comes the fun part, learning about your design. Take a
      package that you want to start restricting dependencies on and
      erase the needDepends(by default it's value will be true). Let's
      take your.first.package and create the new
      <code>design.xml</code> file like so...
    </p>
    <source>
      <![CDATA[
  <design>
      <package name="first" package="your.first.package"/>
      <package name="second" package="your.second.package" needDepends="false"/>
      <package name="third" package="your.third.package" needDepends="false"/>
      <package name="fourth" package="your.fourth.package" needDepends="false"/>
      <package name="fifth" package="your.fifth.package" needDepends="false"/>
  </design>
      ]]>
    </source>
    <p>
      Now we run the build and we get errors that your.first.package
      depends on second, third, and fourth.  Let's pretend we only
      wanted to depend on second and third.  We then change our design
      file to so...
    </p>
    <source>
      <![CDATA[
  <design>
      <package name="first" package="your.first.package"
         <depends>second</depends>
         <depends>third</depends>
      </package>
      <package name="second" package="your.second.package" needDepends="false"/>
      <package name="third" package="your.third.package" needDepends="false"/>
      <package name="fourth" package="your.fourth.package" needDepends="false"/>
      <package name="fifth" package="your.fifth.package" needDepends="false"/>
  </design>
      ]]>
</source>
    <p>
      Now we run the build and clean up all the code so that first
      doesn't depend on fourth anymore. This first step can typically
      take a full release if you are doing this in the margins. That
      is ok and now forever your.first.package will only depend on
      second and third until the design file is changed. You have made
      major progress. I would suggest a package a release. It can
      clean up dependencies and you will start finding it can be
      easier to add more and more features and not end up with a wad
      or mess on your hands. Good luck designing. Refactoring a legacy
      system can be very challenging and very long with or without
      this task. This ant task guarantees that you are actually
      heading in your defined direction. Whether the direction is
      correct or not is another story :).
    </p>
    <hr/>
    <p align="center">
      Copyright &copy; 2002-2004 Ant-Contrib Project. All rights
      Reserved.
    </p>
    </section>
  </body>
</document>
